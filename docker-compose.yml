services:
  postgres:
    image: postgres:15-alpine
    container_name: miyanote-db
    environment:
      POSTGRES_DB: miyanote
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NoteMiya0809
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - miyanote-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d miyanote"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: miyanote-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:NoteMiya0809@postgres:5432/miyanote?sslmode=disable
      BLUEPRINT_DB_DATABASE: miyanote
      BLUEPRINT_DB_USERNAME: postgres
      BLUEPRINT_DB_PASSWORD: NoteMiya0809
      BLUEPRINT_DB_PORT: 5432
      BLUEPRINT_DB_HOST: postgres
      BLUEPRINT_DB_SCHEMA: public
      PORT: 8080
      GIN_MODE: debug
    volumes:
      - ./backend:/app
      - /app/vendor
    networks:
      - miyanote-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: miyanote-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_APP_NAME: Miyanote
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - miyanote-network
    restart: unless-stopped

volumes:
  pgdata:
    driver: local

networks:
  miyanote-network:
    driver: bridge
