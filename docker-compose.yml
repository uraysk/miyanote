services:
  postgres:
    image: postgres:15-alpine
    container_name: miyanote-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-miyanote}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - miyanote-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-miyanote}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: miyanote-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-miyanote}?sslmode=disable
      PORT: 8080
      GIN_MODE: ${GIN_MODE:-debug}
    volumes:
      # 開発時のホットリロード用
      - ./backend:/app
      - /app/vendor
    networks:
      - miyanote-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: miyanote-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${BACKEND_PORT:-8080}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME:-Miyanote}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      # 開発時のホットリロード用
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - miyanote-network
    restart: unless-stopped

# ボリューム定義
volumes:
  pgdata:
    driver: local

# ネットワーク定義
networks:
  miyanote-network:
    driver: bridge
